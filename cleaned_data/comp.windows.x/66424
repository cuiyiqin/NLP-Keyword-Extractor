<email> david b lewis subject compwindowsx frequently asked questions faq <number><number> summary useful information x window system articleid visualc00eqq00a expires sun <number> may <number> <number><number><number> gmt replyto faq<email> x faq maintenance address organization visual inc lines <number> archivename xfaqpart0 lastmodified <number><number><number> subject <number> im writing widget cant use float resource value float resources portable size value may larger size xtpointer try using pointer float instead xaw scrollbar float resources handled way subject <number> memory leak x00r0 xtdestroywidget yes unofficial fix<number> x00r0 destroyc destroyc000 thu jul <number> <number><number><number> <number> libxtdestroyc thu jul <number> <number><number><number> <number> <number> <number> <cur>xconsortium destroycv <number> <number><number><number> <number><number><number> swick exp <cur> + plus unofficial patches revisions <number> <number> copyright <number> <number> digital equipment corporation maynard massachusetts <number> int = <number> destroyrec dr = app>destroylist < app>destroycount dr>dispatchlevel >= dispatchlevel widget w = dr>widget app>destroycount bcopy chardr+<number> chardr app>destroycountsizeofdestroyrec xtphase0destroyw else ++ dr++ <number> int = <number> destroyrec dr < app>destroycount + + xtphase0destroy result calls xtdestroywidget + could cause app>destroylist reallocated + + + dr = app>destroylist + dr>dispatchlevel >= dispatchlevel widget w = dr>widget app>destroycount bcopy chardr+<number> chardr app>destroycount sizeofdestroyrec xtphase0destroyw else ++ donna converse <email> subject <number> callbacks guaranteed called order registered although books demonstrate current implementation xt happens call callback procedures order registered specification guarantee sequence supplemental authoritative documents ie asenteswick volume say order undefined callback list manipulated widget application xt cannot guarantee order execution general callback procedures thought operating independently one another depend sideeffects callbacks operating seqence needed single callback registered explicitly call functions necessary <number><number> thanks <email> subject <number> doesnt xtdestroywidget actually destroy widget xtdestroywidget operates two passes order avoid leaving dangling data structures functioncall marks widget actually destroyed program returns eventloop subject <number> query user synchronously using xt possible code looks like trivial callback clear flow control calls askuser block answer set one valid values yes answer code drops callback back eventprocessing loop void quitwidget w xtpointer client xtpointer call int answer answer = askuserw really quit retyes == answer answer = askuserw really positive retyes == answer exit<number> realistic example might ask whether create file whether overwrite accomplished entering second eventprocessing loop waiting user answers question answer returned calling function function askuser looks something like motif replaced widgetsetspecific code create sort dialogbox displaying question string buttons ok cancel help equivalents int askuserw string widget w char string int answer=retnone notused marker widget dialog could cachecarry arg args<number> int n = <number> xtappcontext context n=<number> xtsetargargsn xmnmessagestring xmstringcreateltorstring xmstringdefaultcharset n++ xtsetargargsn xmndialogstyle xmdialogapplicationmodal n++ dialog = xmcreatequestiondialogxtparentw string args n xtaddcallbackdialog xmnokcallback response answer xtaddcallbackdialog xmncancelcallback response answer xtaddcallbackdialog xmnhelpcallback response answer xtmanagechilddialog context = xtwidgettoapplicationcontext w answer == retnone || xtapppendingcontext xtappprocessevent context xtimall xtdestroywidgetdialog blow away dialog box shell return answer dialog supports three buttons set call function tickled user variable answer set user finally selects one choices void responsew client call widget w xtpointer client xtpointer call int answer = int client xmanycallbackstruct reason = xmanycallbackstruct call switch reason>reason case xmcrok answer = retyes define value break case xmcrcancel answer = retno break case xmcrhelp answer = rethelp break default return code unwraps back point answer needed continues thanks dan heller <email> code dans r0contrib widgetwrap library <number><number> subject <number> determine name existing widget widget id need know name widget users r0 later best using xtname function work widgets nonwidget objects still using r0 use simple bit code want note depends widgets internal data structures necessarily portable future versions xt including r0 include <x00coreph> include <x00xresourceh> string xtname widget widget widget work nonwidget objects return xrmnametostringwidget>corexrmname <number><number> modified suggestion larry rogers <email> <number><number> subject <number> get baddrawable error drawing xtwindowwidget im order get window xlib graphics within xtbased program > canvas = xtcreatemanagedwidget widgetclass drawing area > > window = xtwindowcanvas get window associated widget > > xdrawline window produces error window associated widget created part realization widget using window id null window could create error describe necessary call xtrealizewidget attempting use window associated widget note window created xtrealizewidget call server may actually mapped yet also wait expose event window drawing subject <number> get badmatch error calling xgetimage badmatch error occur specified rectangle goes edge screen dont want catch error deal take following steps avoid error <number> make pixmap size rectangle want capture <number> clear pixmap background using xfillrectangle <number> use xcopyarea copy window pixmap <number> get noexpose event copy clean use xgetimage grab image pixmap <number> get one graphicsexpose events copy wasnt clean xywidthheight members graphicsexpose event structures tell parts pixmap arent good <number> get rid pixmap probably takes lot memory <number><number> thanks oliver jones <email> subject <number> application tell run x number programs offer x modes otherwise run straight characteronly mode easiest way application determine running x display attempt open connection x server display = xopendisplaydisplayname display x stuff else curses something else displayname either string specified commandline following display convention otherwise charnull case xopendisplay uses value <cur>display set superior simply checking existence display commandline argument checking <cur>display set environment neither adequate <number><number> subject <number> make busy cursor application computing necessary call xdefinecursor every window application easiest thing create single inputonly window large largest possible screen make child toplevel window clipped window wont affect application needs big largest possible screen case user enlarges window busy moves elsewhere within virtual desktop substitute toplevel topmost widget similar code work xlibonly applications use top window unsigned long valuemask xsetwindowattributes attributes ignore device events busy cursor displayed valuemask = cwdontpropagate | cwcursor attributesdonotpropagatemask = keypressmask | keyreleasemask | buttonpressmask | buttonreleasemask | pointermotionmask attributescursor = xcreatefontcursorxtdisplaytoplevel xcwatch window big display screen clipped parent window never worry resizing xcreatewindowxtdisplaytoplevel xtwindowtoplevel <number> <number> <number> <number> unsigned int <number> <number> inputonly copyfromparent valuemask attributes maximum size could replaced real size screen particularly avoid servers problems windows larger <number> want use busy cursor map raise window go back normal unmap automatically keep getting extra mouse events depending precisely window manager works may may similar effect keystrokes well addition note also xaw widgets support xtncursor resource temporarily reset merely wish change cursor without blocking pointer events thanks andrew wason <email> dan heller <email> <email> <number><number><number> subject <number> fork without hanging parent x program xbased application spawns unix processes continue run closed typically vanish children terminated children inherit parent open x connection display need fork immediately child process close connectionnumberxtdisplaywidget close filedescriptor display information exec able exit parent alternatively execing make call causes file descriptor closed exec void fcntlconnectionnumberxdisplay fsetfd <number> thanks janet anstett <email> gordon freedman <email> <number><number> greg holmberg <email> <number><number> subject <number> make xt xlib calls signal handler xlib xt mutual exclusion protecting critical sections signal handler makes call wrong time might function calling already executing leave library inconsistent state note ansi c standard points behavior signal handler undefined signal handler calls function signal problem specific xlib xt posix specification mentions functions may called safely may assumed functions called xlib xt functions work around problem setting flag interrupt handler later checking work procedure timer event previously added note article x journal <number><number> example oreilly volume <number> error thanks pete ware <email> donna converse <email> <number><number> subject <number> xlib sequence lost errors may see errors issue xlib requests xlib error handler likely make calls generate x requests xt xlib signal handler shouldnt case subject <number> xt program handle socket pipe file input common need write xt program accept input user via x connection file descriptor operates efficiently without blocking either x connection file descriptor solution use xtappaddinput open file descriptor use xtappaddinput register input handler input handler called every time something file descriptor requiring programs attention write input handler like would xt callback work quickly returns important use nonblocking io system calls input handlers input handlers read file descriptor although input handler write handle exception conditions wish careful register input handler read disk file find function called even isnt input pending xtappaddinput actually working supposed input handler called whenever file descriptor ready read new data read disk file unlike pipe socket almost always ready read however spin back beginning read data youve read result function almost always called every time around xtappmainloop way get type interaction expecting add line beginning function test whether new data ioctlfd fionread n == <number> || n == <number> return called frequently application effectively busywait may better using xtappaddinput instead setting timer timer procedure checking file input courtesy dan heller <email> <number><number> <email> <number><number> ollie jones <email> <number><number> subject <number> simulate button pressrelease event widget using xsendevent likely youre setting window field event xt needs order match widget receive event youre sending events application use xtdispatchevent instead efficient xsendevent avoid roundtrip server depending well widget written may able call action procedures order get effects want courtesy mark horstman <email> <number><number> subject <number> doesnt anything appear run simple program > > thewindow = xcreatesimplewindowthedisplay > rootwindowsizehintsxsizehintsy > sizehintswidthsizehintsheightborderwidth > blackpixelthedisplaythescreen > whitepixelthedisplaythescreen > > xselectinputthedisplaythewindowexposuremask|buttonpressmask| > buttonreleasemask > xmapwindowthedisplaythewindow > > xdrawlinethedisplaythewindowthegc00000000 > right map window drawing however window ready drawn actually appears screen application receives expose event drawing done generally appear youll see code like many programs code would appear window created mapped done xnexteventthedisplaytheevent switch theeventtype case expose expose events redraw xdrawlinethedisplaythewindowthegc00000000 break note second problem xlib implementations dont set default graphics context correct foregroundbackground colors program could previously include code thegcvaluesforeground=blackpixelthedisplaythescreen eg thegcvaluesbackground=whitepixelthedisplaythescreen eg thegc = xcreategcthedisplaythewindow gcforeground|gcbackgroundthegcvalues note code uses blackpixel whitepixel avoid assuming <number> black <number> white viceversa relationship pixels <number> <number> colors black white implementationdependent may reversed may even correspond black white also note actually using blackpixel whitepixel usually wrong thing finished program ignores users preference foreground background also note run situation xtbased program draw xtwindoww right realized may yet appeared subject <number> difference screen screen screen xlib structure includes information one monitors virtual monitors single x display supports server support several independent screens numbered unix<number> unix<number> unix<number> etc screen screennumber second digit <number> <number> <number> thought index array available screens particular display connection macros use obtain information particular screen application running typically two forms one takes screen one takes display screennumber xtbased programs typically use xtscreenwidget determine screen application running uses single screen part confusion may arise fact macros return characteristics screen display names xdisplaywidth xdisplayheight etc subject <number> use c++ x00 motif xview x00r0<number> header files compatible c++ motif <number> header files usable inside extern c however definition string intrinsich conflict libg++ string class needs worked around projects help wwl set c++ classes jeandaniel fekete wrap x toolkit widgets available via anonymous ftp exportlcsmitedu contribwwl<number>tarz <number><number> lrilrifr <number>000 pubwwl<number>tarz works building set c++ classes parallel class tree widgets c++ interviews toolkit obtainable via anonymous ftp interviewsstanfordedu interviews uses boxglue model similar tex constructing user interfaces supports multiple looks user interfaces sample applications include wysiwig document editor doc macdrawlike drawing program idraw interface builder ibuild things class library written rome air force base strategic air command available freeware archive sites motif++ publicdomain library defines c++ class wrappers motif <number> adds application class eg initializing x also integrates wcl xbae widget set work developed ronald van loon <<email> based x++ set bindings done university lowell graphics research laboratory current sources available decuacdeccom <number>0000 pubx00motif+<number>jul00tarz source code examples doug youngs objectoriented programming c++ osfmotif isbn <number><number><number><number> include widget wrappers include set classes encapsulates higherlevel facilities commonly needed motif xtbased applications check export ~ftpcontribyoungc++tarz rogue wave offers viewh++ c++ programmers using motif info <phone> <phone> product called commonview glockenspiel ltd ireland apparently c++based toolkit multiple window systems including pm windows xmotif xv++ sold qualix <phone> fax <number> implements interface gil files suns openwindows developers guide <number> produces xview wrapper classes c++ uit set c++ classes embedding xview toolkit intended use suns openwindows developers guide <number> builder tool sources exportmiteduau uittarz version <number> released <number><number><number> also likely use objectcenter saberc++ reasonable alternative parcplaces formerly solbournes object interface thanks douglas rand <email> george wu <email><number><number> subject <number> obtain alternate language bindings x versions clx lisp bindings part x00 core source distributions version clx r0 tape <number><number> version <number>0 <number><number> exportlcsmitedu contribclxr000tarz saic adax00 bindings anonymous ftp pub starsrosslynunisyscom <number>0 xada study team sponsored nasa jsc apparently working bindings information <email> gnu smalltalk beta native smalltalk binding x called stix <email> still beginning stages documentation sparse outside smalltalk code sources available pubgnusmalltalk<number>0tarz prepaimitedu <number>000 ugleunitno <number>000 prolog bindings called xwip written ted kim ucla supported part darpa available anonymous ftp exportlcsmiteducontribxwiptarz ftpcsuclaedupubxwiptarz prolog language bindings depend quintustype foreign function interface prolog developer gotten work quintus sicstus prolog inquiries go <email> <number><number> scheme bindings xlib osfmotif xaw part elk distribution version <number>0a export obsoletes version r0 contrib tape xscm bolton accessory aubrey jaffers scm scheme interpreter provides interface xlib motif openlook available via ftp altdorfaimiteduarchivescmxscm000tarz nexusyorkucapubschemenewxscm000tarz ada bindings motif explicitly eventually made available jet propulsion laboratories probably normal electronic means advance information obtained <email> may respond time permits adamotif complete binding x motif ada language many common systems based part upon saicunisys bindings also includes uil ada translator info systems engineering research corporation <number><number>adaserc well<email> also mit consortium although involved producing ada bindings x maintains partial listing people involved x ada information available donna converse <email> subject <number> xgetwindowattributes get windows background pixelpixmap set background pixel pixmap window cannot reread clients reason client create pixmap set background pixmap window free pixmap window keeps background pixmap destroyed youre sure window background pixel pixmap use xcleararea clear region background color use xgetimage read back pixel however action alters contents window suffers race conditions exposures courtesy dave lemke ncd stuart marks sun note applies border pixelpixmap misfeature protocol allows server free manipulate pixelpixmap however wants requiring server keep original pixel pixmap potentially lot space saved courtesy jim fulton mit x consortium subject <number> create transparent window completely transparent window easy get use inputonly window order create window mostly transparent several choices shape extension first released x00r0 offers easy way make nonrectangular windows set shape window fit areas window nontransparent however servers support extension machinespecific method implementing transparent windows particular servers use overlay plane supported hardware note x notion transparent color index generally portable solution use large number tiny windows makes operating application unit difficult final answer consider whether really need transparent window would satisfied able overlay application window information draw separate bitplanes colors appear properly thanks der mouse <email> <number><number> see also x journal <number><number> complete answer including code samples last option subject <number> doesnt gxxor produce mathematicallycorrect color values using gxxor may expect drawing value black background black example produce white however drawing operation work rgb values colormap indices color resulting colormap index actually points undefined visually random unless actually filled many x servers black white often <number><number> <number><number> programs taking advantage mathematical coincidence break want combining colors gxxor allocating number color cells filling chosen precomputed values want use gxxor simply switch two colors take shortcut setting background color gc graphics context <number> foreground color value draws red say result blue draws blue result red foreground value xor colormap indices red blue thanks chris flatters <email> ken whaley <email> <number><number> subject <number> every color allocate show black make sure youre using <number> bits <number> red green blue fields xcolor structure scaled <number> nothing <number> fullblast forget scale using example <number><number> color xalloccolor function perform correctly resulting color usually black thanks paul asente <email> <number><number> subject <number> cant program get standard colormap imageprocessing program uses xgetrgbcolormap get standard colormap doesnt work xgetrgbcolormap used property xargbdefaultmap create standard colormap returns one one already exists use xstdcmap order create standard colormap first <number><number> der mouse <email> subject <number> pixmap copy screen show garbage initial contents pixmaps undefined means servers allocate memory leave around whatever happens usually garbage probably want clear pixmap first using xfillrectangle function gxcopy foreground pixel whatever color want background 0l using pixmap mask courtesy dave lemke ncd stuart marks sun subject <number> check whether window id valid program id window remote display want check whether window exists anything x asynchronous isnt guarantee window would still exist time got id time sent event window otherwise manipulated send event without checking install error handler catch badwindow errors would indicate window longer exists scheme work except rare occasion original window destroyed id reallocated another window courtesy ken lee <email> <number><number> subject <number> two applications draw window yes x server assigns ids windows resources actually server assigns bits client others application knows id manipulate resource almost x server resource except gcs private color cells shared problem face disseminate window id multiple applications simple way handle solves problem applications running different machines first application create speciallynamed property rootwindow put window id second application retrieves property whose name also knows draw whatever wants window note scheme works iff one instance first application running scheme subject limitations mentioned question using window ids remote displays note also still need coordinate higherlevel cooperation among applications note also two processes share window try use server connection one process child close connection server open connection mostly courtesy phil karlton <email> <number><number> subject <number> cant program work tvtwm swm number applications including xwd xwininfo xsetroot handle virtual root window tvtwm swm use typically return wrong child root general solution add code use application would normally use rootwindowdpyscreen function name getvroot description gets root window even virtual root arguments display screen returns root window client include <x00xatomh> window getvrootdpy scr display dpy int scr window rootreturn parentreturn children unsigned int numchildren window root = rootwindowdpy scr atom swmvroot = none int swmvroot = xinternatomdpy swmvroot false xquerytreedpy root rootreturn parentreturn children numchildren = <number> < numchildren ++ atom actualtype int actualformat long nitems bytesafter window newroot = null xgetwindowpropertydpy childreni swmvroot <number> <number> false xawindow actualtype actualformat nitems bytesafter unsigned char newroot == success newroot root = newroot break return root courtesy david elliott <email> similar code ssetroot version xsetroot distributed tvtwm <number><number> header file andreas stolcke icsi exportlcsmiteducontribvrooth functions similarly providing macros rootwindow defaultrootwindow code include header file first run properly presence virtual desktop subject <number> keep window resized user resizing window done window manager window managers pay attention size hints application places window guarantee window manager listen try setting minimum maximum size hints target size hope best <number><number> subject <number> keep window foreground times rather antisocial application constantly raise eg tracking visibilitynotify events isnt overlapped imagine conflict two programs running sure way window appear top stack make window overrideredirect means temporarily assuming windowmanagement duties window want infrequently short periods time eg popup menus short parametersetting windows thanks der mouse <email> <number><number> subject <number> make text bitmaps blink x easy way unless youre willing depend sort extension yet nonexistent arrange blinking either redrawing contents periodically possible playing games colormap changing color contents thanks <email> der mouse <number><number> subject <number>+ get doubleclick xlib users xt support translation manager help get notification doubleclicking good way get doubleclick xlib protocol provide enough support doubleclicks clientside timeouts unless singleclick action defer actually taking next see event server thus timeouts means systemdependent code unixish implementations use xconnectionnumber get file descriptor x connection use select something similar note many userinterface references suggest doubleclick used extend action indicated singleclick case interface execute first action compromise check timestamp second event determine whether singleclick action doubleclick action thanks <email> der mouse <number><number> subject <number> render rotated text xlib intentionally provide sophisticated graphics capabilities leaving serverextensions clientsside graphics libraries choice want stay within core x protocol render text pixmap read back via xgetimage rotate hand whatever matrices want put back server via xputimage specifically <number> create bitmap b write text <number> create xybitmap image b via xgetimage <number> create xybitmap image i0 big enough handle transformation <number> xy i0 i0xy = iab = x costheta y sintheta b = x sintheta + y costheta <number> render i0 note careful implement lose bits algorithm based shear transformations may fact better highlevel serverextensions graphics packages available x also permit rendering rotated text display postscript pex phigs gks although capable arbitrary rotation probably use fonts would found printer addition enough access server install font create font consists letters rotated predefined angle application figure placement glyph courtesy der mouse <email> eric taylor <email> ken lee <email> <number><number> liam quin <email> <number><number> interviews c++ ui toolkit x contrib software support rendering rotated fonts x could one source example code brian r smith <email> <number><number> another possibility use hershey fonts strokerendered used x converting xdrawline requests <email> <number><number> xrotfont program alan richardson <email> posted compsourcesx july <number> <number> paints rotated font implementing method using outline hershey font xvertext package alan richardson <email> set functions facilitate writing text angle version <number> recently released altsources compsourcesmisc <number><number> also export contribxvertext00sharz oreillys x resource volume <number> includes information hp modifications x fonts server provide rotated scaled text subject <number> x registry reserve names places x toolkit applications x protocol define use string names context conflicts possible different components use name different things mit x consortium maintains registry names domains orgainization names selection names selection targets resource types application classes class extension record types several others list <number><number> directory mitdocregistry r0 tape also available sending send docs registry xstuff mail server register names first come first served ask questions send <email> sure include postal address confirmation <number><number> condensed asenteswick appendix h david b lewis faq<email> faqs maam joe friday david b lewis temporarily speaking visual inc day <email> evening david<email>