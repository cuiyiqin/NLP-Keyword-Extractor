<email> nick haines subject re level <number> inreplyto <email> message tue <number> apr <number> <number><number><number> gmt originator <email> nntppostinghost snowfoxcscmuedu organization school computer science carnegie mellon university distribution sci lines <number> article <<email> <email> tom writes nick haines sez >given ive heard shuttle software rated level <number> >maturity strongly doubt lots bugs case level <number> many different levels ive never heard rating system anyone care clue rating system used arpa organisations measure maturity software process ie entire process software gets designed written tested delivered supported etc see managing software process watts humphrey addison wesley <number> excellent software engineering text <number> levels software process maturity <number> initial <number> repeatable <number> defined <number> managed <number> optimizing levels approximately characterized follows <number> statistically software process control statistical basis estimating large software long take produce expensive reliable software production level <number> stable process statistical controls rigorous project management done something projects planned detail software configuration management quality assurance <number> process defined understood implementation consistent includes things like software inspection rigorous software testing framework configuration management typically software engineering process group within project <number> statistical information software systematically gathered analysed process controlled basis information software quality measured goals <number> defects prevented process automated software contracts effective certified nick haines <email>