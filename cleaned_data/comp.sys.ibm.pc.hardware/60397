<email> eyal lebedinsky subject re int00h joysticks slow organization info sci eng university canberra australia lines <number> <<email> <email> writes >im using int00h read joystick hideously slow something >like <number> cpu time spent reading joystick > program nothing printf joyread readprint reason joystick stuff take <number> time even efficient > problem lot programs trap int00h like smartdrv > slow hell interface read joystick port > reasonably safe fashion via polling isnt platform >clockspeed specific truth int 00h joystick reading slow read directly hardware port note exposes intermittent disturbance interrupts may want read say twice row keep lower results dont turn interrupts may prove detrimental health high speed comms devices example joyc example read pc joystick port polling hardware port directly uses inpoutp byte port access timeout int count=<number> counts zero sample reads one port presented b comments read merging two time either joystick connected need optimize routine since runs long joystick circuitry needs written eyal lebedinsky <email> include <stdioh> include <stdlibh> include <conioh> extern int readjoy int x int y int b0 int b0 define joyport 0x000 define xjoy 0x00 joystick b use 0x00 define yjoy 0x00 joystick b use 0x00 define xymask xjoy|yjoy define but0 0x00 joystick b use 0x00 define but0 0x00 joystick b use 0x00 int returns <number> ok readjoy int x int y int b0 int b0 register int count register char temp joy temp = charxymask count = <number> outp joyport <number> set trigger temp ^= joy = charinp joyport temp xjoy x = count temp yjoy y = count ++count temp = joy xymask b0 = joy but0 b0 = joy but0 return count main demonstration int main int rc x y b0 b0 printf hit key exit kbhit rc = readjoy x y b0 b0 printf d 0d 0d d d rc x y b0 b0