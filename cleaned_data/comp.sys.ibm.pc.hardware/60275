<email> geoffrey sherwood subject orchid p0000 vs fahrenheit mini review organization adobe systems incorporated xnewsreader tin version <number> pl0 lines <number> purchased viewsonic <number> orchid p0000 short happy monitor unhappy card spent lot time futzing card going write monitor pretty moires simcity <number> magnavox went away isnt heavy thought would <number> lbs think much monitor bitch session test results going modern trend orchid p0000 card supports <number> colors 000x000 mode without driver course breaks dos program uses svga modes like cdroms compudyne whiplash vga orchid fahrenheit <number> orchid f vlb share limitation s0 cards means s0 problem p0000 uses weitek vga chip also doesnt support hercules graphite card seem modes didnt run test cases boards brief time able print splash screen groliers encyclopedia though s0 cards printed hash suspect svga modes supported supported resolutions really annoy 0000x0000 00hz tell driver nec 0fg six monitors listed plus generic choose generic cant get high refreshes 0000x000 limited 00hz seems hardware able support bandwidth 00hz <number> sure able <number> higher vertical resolution main reason bought card orchid f vlb currently 0000x000x00 hz well higher graphics modes crash hp dashboard got phone orchid <number> drivers dont know unable recreate problem plus side tech rep helpful could booted program computer verify didnt problem didnt know limited refresh <number> hz either board faster ofvlb things according hercules speedy program program tests various operations reports results pixelssecond dont numbers graphite card close half ofvlb ie slower running 00mhz <number> isa numbers arent really comparable following numbers obtained using <number> <number> mhz air motherboard umc chipset <number> mb memory give ranges program reports numbers computes tend jump around bit k means thousand <number> m means million pixels per second orchid fahrenheit vlb orchid p0000 chip s0 <number> weitek <number> dib screen 000k 000k 000k 000k memory screen <number>0m <number>0m <number>0m <number>0m screen screen 00m <number>0m 00m <number>0m vector solid <number>0m <number>0m <number>0m vector styled 00k 00k 000k 000k polygon shaded <number>0m <number>0m <number>0m <number>0m polygon hatched <number>0m <number>0m <number>0m <number>0m ternary rops <number>0m <number>0m 000k 000k font 000k 000k 00k 00k <number>0m dib screen test takes device independent bitmap face transfers screen idea done internally far conversions go memory screen takes face copies screen guess rasterized bitmap copied video display screen screen test copies face place place screen awesome interestingly solid vectors shaded polygons show improvement hatched polygons ie filled crosshatching ternary rops whatever graphics operations like xors maybe dead loss <number> give two numbers <number> fonts think caching fonts first drawn screen done fairly slowly <number><number> speed ofvlb speed increases dramatically sounds like programming benchmark make claims numbers mean anything saw ran computer normally dont write disclaimers time maybe id better testing totally unconnected work program unix decstations done completely without knowledge blessing equipment company geoff sherwood