<email> cavalier subject help needed organization university pennsylvania lines <number> nntppostinghost eniacseasupennedu hello hope somebody help currently working project trying communicate ibm <number> phoenix bios using c++ board made intel <number> cpu uart chip board works fine transmit command terminal emulation mode kermit seems something wrong initialization protocol used try c++ need access unit built using c sizable chunk c code using perform calculations operations difficult code assembly language <number> included assembly code running c++ code trying use anyone show something blatantly incorrectly missing lack knowledge rs<number> serial communications please email wrote assembly language wait character received check 0x00 character 0x00 received leds indicate two c++ programs written nothing set com port <number> send 0x00 character one uses bioscom function biosh uses software interrupt int00 function dosh triple checked baud rate <number> parity none stop bits <number> character length <number> bits interrupt calls 0x00 currently loss may wrong hardware gurus want comment thanks alot hubert de jesus <email> intel asm command equ 0000h command register <number> porta equ 0000h port <number> timerlo equ 0000h high <number> bits <number> timer timerhi equ 0000h low <number> bits <number> timer uartdata equ e000h uart data register uartcmd equ e000h uart command register org 0000h sram location mvi a00h set low timer bits sta timerlo mvi a00h set high timer bits sta timerhi mvi a00000000b start timer enable port sta command mvi a00h display <number> <number>segment leds sta porta mvi a00h clear uart command sta uartcmd sta uartcmd sta uartcmd mvi a00000000b internally reset uart sta uartcmd lda uartdata remove extraneous data mvi a00000000b init uart <number> data bits sta uartcmd parity <number> stop bit 00x async mvi a00000000b enable transmit receive sta uartcmd init lda uartcmd read status register ani 00h rxrdy jz init loop lda uartdata read data character cpi character = 0x00 jnz init loop mvi a00h character received sta porta display <number> <number>segment leds hlt end c++ using bioscom include <stdioh> include <stdlibh> include <biosh> define init <number> define send <number> define receive <number> define status <number> define com0 <number> void main char abyte abyte = 0xa0 bioscom init abyte com0 printf initialized comm port <number> bioscom status <number> com0 0x0000 abyte = bioscom send abyte com0 printf sent start character c++ using int00 include <stdioh> include <stdlibh> include <dosh> include <biosh> main union regs registers registershah = 0x00 registershal = 0xa0 registersxdx = 0x00 int00 0x00 registers registers printf com0 initialized registershah = 0x00 registershal = 0x00 registersxdx = 0x00 int00 0x00 registers registers printf sent start character